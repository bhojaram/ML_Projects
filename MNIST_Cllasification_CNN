{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8542112,"sourceType":"datasetVersion","datasetId":5103297}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/bhojaram/mnist-classification?scriptVersionId=181019492\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-02T05:28:22.621255Z","iopub.execute_input":"2024-06-02T05:28:22.62162Z","iopub.status.idle":"2024-06-02T05:28:22.63105Z","shell.execute_reply.started":"2024-06-02T05:28:22.621591Z","shell.execute_reply":"2024-06-02T05:28:22.629995Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"/kaggle/input/mnist-dataset/sample_submission.csv\n/kaggle/input/mnist-dataset/train.csv\n/kaggle/input/mnist-dataset/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.callbacks import LearningRateScheduler","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:28:27.004286Z","iopub.execute_input":"2024-06-02T05:28:27.004657Z","iopub.status.idle":"2024-06-02T05:28:27.009386Z","shell.execute_reply.started":"2024-06-02T05:28:27.004627Z","shell.execute_reply":"2024-06-02T05:28:27.008495Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"df_train = pd.read_csv('/kaggle/input/mnist-dataset/train.csv')\ndf_train.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:28:32.794052Z","iopub.execute_input":"2024-06-02T05:28:32.794888Z","iopub.status.idle":"2024-06-02T05:28:35.04855Z","shell.execute_reply.started":"2024-06-02T05:28:32.794854Z","shell.execute_reply":"2024-06-02T05:28:35.04753Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n0      1       0       0       0       0       0       0       0       0   \n1      0       0       0       0       0       0       0       0       0   \n2      1       0       0       0       0       0       0       0       0   \n3      4       0       0       0       0       0       0       0       0   \n4      0       0       0       0       0       0       0       0       0   \n\n   pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n0       0  ...         0         0         0         0         0         0   \n1       0  ...         0         0         0         0         0         0   \n2       0  ...         0         0         0         0         0         0   \n3       0  ...         0         0         0         0         0         0   \n4       0  ...         0         0         0         0         0         0   \n\n   pixel780  pixel781  pixel782  pixel783  \n0         0         0         0         0  \n1         0         0         0         0  \n2         0         0         0         0  \n3         0         0         0         0  \n4         0         0         0         0  \n\n[5 rows x 785 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n      <th>pixel0</th>\n      <th>pixel1</th>\n      <th>pixel2</th>\n      <th>pixel3</th>\n      <th>pixel4</th>\n      <th>pixel5</th>\n      <th>pixel6</th>\n      <th>pixel7</th>\n      <th>pixel8</th>\n      <th>...</th>\n      <th>pixel774</th>\n      <th>pixel775</th>\n      <th>pixel776</th>\n      <th>pixel777</th>\n      <th>pixel778</th>\n      <th>pixel779</th>\n      <th>pixel780</th>\n      <th>pixel781</th>\n      <th>pixel782</th>\n      <th>pixel783</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 785 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_test = pd.read_csv('/kaggle/input/mnist-dataset/test.csv')\ndf_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:28:38.994806Z","iopub.execute_input":"2024-06-02T05:28:38.995589Z","iopub.status.idle":"2024-06-02T05:28:40.454799Z","shell.execute_reply.started":"2024-06-02T05:28:38.995561Z","shell.execute_reply":"2024-06-02T05:28:40.453905Z"},"trusted":true},"execution_count":32,"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"   pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  pixel8  \\\n0       0       0       0       0       0       0       0       0       0   \n1       0       0       0       0       0       0       0       0       0   \n2       0       0       0       0       0       0       0       0       0   \n3       0       0       0       0       0       0       0       0       0   \n4       0       0       0       0       0       0       0       0       0   \n\n   pixel9  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n0       0  ...         0         0         0         0         0         0   \n1       0  ...         0         0         0         0         0         0   \n2       0  ...         0         0         0         0         0         0   \n3       0  ...         0         0         0         0         0         0   \n4       0  ...         0         0         0         0         0         0   \n\n   pixel780  pixel781  pixel782  pixel783  \n0         0         0         0         0  \n1         0         0         0         0  \n2         0         0         0         0  \n3         0         0         0         0  \n4         0         0         0         0  \n\n[5 rows x 784 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pixel0</th>\n      <th>pixel1</th>\n      <th>pixel2</th>\n      <th>pixel3</th>\n      <th>pixel4</th>\n      <th>pixel5</th>\n      <th>pixel6</th>\n      <th>pixel7</th>\n      <th>pixel8</th>\n      <th>pixel9</th>\n      <th>...</th>\n      <th>pixel774</th>\n      <th>pixel775</th>\n      <th>pixel776</th>\n      <th>pixel777</th>\n      <th>pixel778</th>\n      <th>pixel779</th>\n      <th>pixel780</th>\n      <th>pixel781</th>\n      <th>pixel782</th>\n      <th>pixel783</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 784 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_train.shape, df_test.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:28:44.358244Z","iopub.execute_input":"2024-06-02T05:28:44.358621Z","iopub.status.idle":"2024-06-02T05:28:44.364605Z","shell.execute_reply.started":"2024-06-02T05:28:44.358592Z","shell.execute_reply":"2024-06-02T05:28:44.363697Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"((42000, 785), (28000, 784))"},"metadata":{}}]},{"cell_type":"code","source":"print(df_train.isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:28:47.650557Z","iopub.execute_input":"2024-06-02T05:28:47.650924Z","iopub.status.idle":"2024-06-02T05:28:47.683048Z","shell.execute_reply.started":"2024-06-02T05:28:47.650896Z","shell.execute_reply":"2024-06-02T05:28:47.682185Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"label       0\npixel0      0\npixel1      0\npixel2      0\npixel3      0\n           ..\npixel779    0\npixel780    0\npixel781    0\npixel782    0\npixel783    0\nLength: 785, dtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"df_train.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:28:51.113076Z","iopub.execute_input":"2024-06-02T05:28:51.113462Z","iopub.status.idle":"2024-06-02T05:28:51.15323Z","shell.execute_reply.started":"2024-06-02T05:28:51.113433Z","shell.execute_reply":"2024-06-02T05:28:51.152327Z"},"trusted":true},"execution_count":35,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 42000 entries, 0 to 41999\nColumns: 785 entries, label to pixel783\ndtypes: int64(785)\nmemory usage: 251.5 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df_train.describe()","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:28:54.674868Z","iopub.execute_input":"2024-06-02T05:28:54.675698Z","iopub.status.idle":"2024-06-02T05:28:56.625398Z","shell.execute_reply.started":"2024-06-02T05:28:54.675666Z","shell.execute_reply":"2024-06-02T05:28:56.624511Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"              label   pixel0   pixel1   pixel2   pixel3   pixel4   pixel5  \\\ncount  42000.000000  42000.0  42000.0  42000.0  42000.0  42000.0  42000.0   \nmean       4.456643      0.0      0.0      0.0      0.0      0.0      0.0   \nstd        2.887730      0.0      0.0      0.0      0.0      0.0      0.0   \nmin        0.000000      0.0      0.0      0.0      0.0      0.0      0.0   \n25%        2.000000      0.0      0.0      0.0      0.0      0.0      0.0   \n50%        4.000000      0.0      0.0      0.0      0.0      0.0      0.0   \n75%        7.000000      0.0      0.0      0.0      0.0      0.0      0.0   \nmax        9.000000      0.0      0.0      0.0      0.0      0.0      0.0   \n\n        pixel6   pixel7   pixel8  ...      pixel774      pixel775  \\\ncount  42000.0  42000.0  42000.0  ...  42000.000000  42000.000000   \nmean       0.0      0.0      0.0  ...      0.219286      0.117095   \nstd        0.0      0.0      0.0  ...      6.312890      4.633819   \nmin        0.0      0.0      0.0  ...      0.000000      0.000000   \n25%        0.0      0.0      0.0  ...      0.000000      0.000000   \n50%        0.0      0.0      0.0  ...      0.000000      0.000000   \n75%        0.0      0.0      0.0  ...      0.000000      0.000000   \nmax        0.0      0.0      0.0  ...    254.000000    254.000000   \n\n           pixel776     pixel777      pixel778      pixel779  pixel780  \\\ncount  42000.000000  42000.00000  42000.000000  42000.000000   42000.0   \nmean       0.059024      0.02019      0.017238      0.002857       0.0   \nstd        3.274488      1.75987      1.894498      0.414264       0.0   \nmin        0.000000      0.00000      0.000000      0.000000       0.0   \n25%        0.000000      0.00000      0.000000      0.000000       0.0   \n50%        0.000000      0.00000      0.000000      0.000000       0.0   \n75%        0.000000      0.00000      0.000000      0.000000       0.0   \nmax      253.000000    253.00000    254.000000     62.000000       0.0   \n\n       pixel781  pixel782  pixel783  \ncount   42000.0   42000.0   42000.0  \nmean        0.0       0.0       0.0  \nstd         0.0       0.0       0.0  \nmin         0.0       0.0       0.0  \n25%         0.0       0.0       0.0  \n50%         0.0       0.0       0.0  \n75%         0.0       0.0       0.0  \nmax         0.0       0.0       0.0  \n\n[8 rows x 785 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n      <th>pixel0</th>\n      <th>pixel1</th>\n      <th>pixel2</th>\n      <th>pixel3</th>\n      <th>pixel4</th>\n      <th>pixel5</th>\n      <th>pixel6</th>\n      <th>pixel7</th>\n      <th>pixel8</th>\n      <th>...</th>\n      <th>pixel774</th>\n      <th>pixel775</th>\n      <th>pixel776</th>\n      <th>pixel777</th>\n      <th>pixel778</th>\n      <th>pixel779</th>\n      <th>pixel780</th>\n      <th>pixel781</th>\n      <th>pixel782</th>\n      <th>pixel783</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>42000.000000</td>\n      <td>42000.0</td>\n      <td>42000.0</td>\n      <td>42000.0</td>\n      <td>42000.0</td>\n      <td>42000.0</td>\n      <td>42000.0</td>\n      <td>42000.0</td>\n      <td>42000.0</td>\n      <td>42000.0</td>\n      <td>...</td>\n      <td>42000.000000</td>\n      <td>42000.000000</td>\n      <td>42000.000000</td>\n      <td>42000.00000</td>\n      <td>42000.000000</td>\n      <td>42000.000000</td>\n      <td>42000.0</td>\n      <td>42000.0</td>\n      <td>42000.0</td>\n      <td>42000.0</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>4.456643</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.219286</td>\n      <td>0.117095</td>\n      <td>0.059024</td>\n      <td>0.02019</td>\n      <td>0.017238</td>\n      <td>0.002857</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.887730</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>6.312890</td>\n      <td>4.633819</td>\n      <td>3.274488</td>\n      <td>1.75987</td>\n      <td>1.894498</td>\n      <td>0.414264</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2.000000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>4.000000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>7.000000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>9.000000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>254.000000</td>\n      <td>254.000000</td>\n      <td>253.000000</td>\n      <td>253.00000</td>\n      <td>254.000000</td>\n      <td>62.000000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows Ã— 785 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_train_data = df_train.loc[:, 'pixel0':'pixel783']\ndf_labels = df_train[['label']]","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:29:00.474901Z","iopub.execute_input":"2024-06-02T05:29:00.475561Z","iopub.status.idle":"2024-06-02T05:29:00.481018Z","shell.execute_reply.started":"2024-06-02T05:29:00.47553Z","shell.execute_reply":"2024-06-02T05:29:00.480073Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"df_labels.shape, df_train_data.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:29:05.101207Z","iopub.execute_input":"2024-06-02T05:29:05.10156Z","iopub.status.idle":"2024-06-02T05:29:05.10796Z","shell.execute_reply.started":"2024-06-02T05:29:05.101534Z","shell.execute_reply":"2024-06-02T05:29:05.106956Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"((42000, 1), (42000, 784))"},"metadata":{}}]},{"cell_type":"code","source":"df_train_data = df_train_data.to_numpy()\ndf_test = df_test.to_numpy()","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:29:10.101285Z","iopub.execute_input":"2024-06-02T05:29:10.101617Z","iopub.status.idle":"2024-06-02T05:29:10.106366Z","shell.execute_reply.started":"2024-06-02T05:29:10.101594Z","shell.execute_reply":"2024-06-02T05:29:10.105321Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"df_train_data.shape, df_test.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:30:35.89961Z","iopub.execute_input":"2024-06-02T05:30:35.899968Z","iopub.status.idle":"2024-06-02T05:30:35.905916Z","shell.execute_reply.started":"2024-06-02T05:30:35.899941Z","shell.execute_reply":"2024-06-02T05:30:35.905052Z"},"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"((42000, 784), (28000, 784))"},"metadata":{}}]},{"cell_type":"code","source":"# Normalize the data\ndf_train_data = df_train_data.astype('float32') / 255\ndf_test = df_test.astype('float32') / 255\n","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:30:38.895578Z","iopub.execute_input":"2024-06-02T05:30:38.895944Z","iopub.status.idle":"2024-06-02T05:30:39.014574Z","shell.execute_reply.started":"2024-06-02T05:30:38.895917Z","shell.execute_reply":"2024-06-02T05:30:39.01354Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"# Check for any missing or corrupt data points\nassert not np.any(np.isnan(df_train_data))\nassert not np.any(np.isnan(df_test))\n","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:30:42.105629Z","iopub.execute_input":"2024-06-02T05:30:42.105981Z","iopub.status.idle":"2024-06-02T05:30:42.141552Z","shell.execute_reply.started":"2024-06-02T05:30:42.105953Z","shell.execute_reply":"2024-06-02T05:30:42.140761Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.utils import to_categorical\n\n# Convert class vectors to binary class matrices (one-hot encoding)\ntrain_labels = to_categorical(df_labels, num_classes=10)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:30:47.615269Z","iopub.execute_input":"2024-06-02T05:30:47.616169Z","iopub.status.idle":"2024-06-02T05:30:47.621495Z","shell.execute_reply.started":"2024-06-02T05:30:47.616125Z","shell.execute_reply":"2024-06-02T05:30:47.620625Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"train_labels.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:30:50.914096Z","iopub.execute_input":"2024-06-02T05:30:50.91519Z","iopub.status.idle":"2024-06-02T05:30:50.920692Z","shell.execute_reply.started":"2024-06-02T05:30:50.915157Z","shell.execute_reply":"2024-06-02T05:30:50.919739Z"},"trusted":true},"execution_count":44,"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"(42000, 10)"},"metadata":{}}]},{"cell_type":"code","source":"# Flatten the images for PCA\ndf_train_data_flatten = df_train_data.reshape(df_train_data.shape[0], -1)\ndf_test_flatten = df_test.reshape(df_test.shape[0], -1)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:30:54.196869Z","iopub.execute_input":"2024-06-02T05:30:54.197481Z","iopub.status.idle":"2024-06-02T05:30:54.203181Z","shell.execute_reply.started":"2024-06-02T05:30:54.197449Z","shell.execute_reply":"2024-06-02T05:30:54.202196Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"code","source":"from sklearn.decomposition import PCA\n\npca = PCA(n_components=0.95)  # Retain 95% of variance\ntrain_pca = pca.fit_transform(df_train_data_flatten)\ntest_pca = pca.transform(df_test_flatten)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:30:59.583908Z","iopub.execute_input":"2024-06-02T05:30:59.584539Z","iopub.status.idle":"2024-06-02T05:31:01.850928Z","shell.execute_reply.started":"2024-06-02T05:30:59.584506Z","shell.execute_reply":"2024-06-02T05:31:01.84959Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"print(train_pca)","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:36:20.053637Z","iopub.execute_input":"2024-06-02T05:36:20.054371Z","iopub.status.idle":"2024-06-02T05:36:20.059997Z","shell.execute_reply.started":"2024-06-02T05:36:20.054341Z","shell.execute_reply":"2024-06-02T05:36:20.059081Z"},"trusted":true},"execution_count":47,"outputs":[{"name":"stdout","text":"[[-2.5944927  -2.7423997   0.7187508  ... -0.13207571 -0.21368839\n  -0.03842946]\n [ 6.6722918  -1.4139446  -1.9678674  ... -0.07276759  0.04624565\n   0.16054161]\n [-3.4779854  -1.1520277   0.26337487 ...  0.0516727  -0.0536573\n   0.0807275 ]\n ...\n [ 1.3187046   3.7255523  -0.6611977  ... -0.12136338  0.02375128\n  -0.08519083]\n [ 1.2839199   0.2431991   2.7354333  ...  0.10020457 -0.18490171\n  -0.10158059]\n [-1.4284283   1.6427195   0.24666563 ... -0.1415157  -0.2295412\n  -0.1847834 ]]\n","output_type":"stream"}]},{"cell_type":"code","source":"# Inverse transform the PCA data to the original shape (optional)\ntrain_pca_inv = pca.inverse_transform(train_pca).reshape(-1, 28, 28, 1)\ntest_pca_inv = pca.inverse_transform(test_pca).reshape(-1, 28, 28, 1)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:36:26.44788Z","iopub.execute_input":"2024-06-02T05:36:26.448593Z","iopub.status.idle":"2024-06-02T05:36:26.717874Z","shell.execute_reply.started":"2024-06-02T05:36:26.448564Z","shell.execute_reply":"2024-06-02T05:36:26.716563Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"# Reshape the data for CNN\ntrain_cnn = train_pca_inv.reshape((train_pca_inv.shape[0], 28, 28, 1))\ntest_cnn = test_pca_inv.reshape((test_pca_inv.shape[0], 28, 28, 1))\n","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:36:31.40104Z","iopub.execute_input":"2024-06-02T05:36:31.401938Z","iopub.status.idle":"2024-06-02T05:36:31.407429Z","shell.execute_reply.started":"2024-06-02T05:36:31.401909Z","shell.execute_reply":"2024-06-02T05:36:31.406528Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the number of samples to display\nnum_samples = 10\n\n# Select random samples from the training data\nindices = np.random.choice(train_cnn.shape[0], num_samples, replace=False)\nsample_images = train_cnn[indices]\n\n# Convert df_labels to numpy array\ndf_labels_array = df_labels.values\nsample_labels = df_labels_array[indices]\n\n# Plot the samples in a 2x5 grid\nplt.figure(figsize=(10, 3))\nfor i in range(num_samples):\n    plt.subplot(2, 5, i + 1)  # Adjusting to a 2x5 grid\n    plt.imshow(sample_images[i].reshape(28, 28), cmap='gray')  # Ensure images are 28x28\n    plt.title(f'Label: {sample_labels[i][0]}')\n    plt.axis('off')\n\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:45:59.093608Z","iopub.execute_input":"2024-06-02T05:45:59.09479Z","iopub.status.idle":"2024-06-02T05:45:59.691612Z","shell.execute_reply.started":"2024-06-02T05:45:59.094748Z","shell.execute_reply":"2024-06-02T05:45:59.690575Z"},"trusted":true},"execution_count":58,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x300 with 10 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# data augmentation to increase the variety of training data\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(\n    rotation_range=10,\n    zoom_range=0.1,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ndatagen.fit(train_cnn)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:42:18.685781Z","iopub.execute_input":"2024-06-02T05:42:18.686187Z","iopub.status.idle":"2024-06-02T05:42:18.741103Z","shell.execute_reply.started":"2024-06-02T05:42:18.686155Z","shell.execute_reply":"2024-06-02T05:42:18.740315Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"# Define the number of samples to display\nnum_samples = 5\nnum_augmented = 5\n\n# Select random samples from the training data\nindices = np.random.choice(train_cnn.shape[0], num_samples, replace=False)\nsample_images = train_cnn[indices]\n\n# Plot the original and augmented samples\nplt.figure(figsize=(15, num_samples * 2))\n\nfor i in range(num_samples):\n    # Plot the original image\n    plt.subplot(num_samples, num_augmented + 1, i * (num_augmented + 1) + 1)\n    plt.imshow(sample_images[i].reshape(28, 28), cmap='gray')\n    plt.title(f'Original')\n    plt.axis('off')\n\n    # Generate augmented images\n    augmented_images = datagen.flow(np.expand_dims(sample_images[i], 0), batch_size=1)\n\n    # Plot the augmented images\n    for j in range(num_augmented):\n        aug_img = next(augmented_images)[0].reshape(28, 28)\n        plt.subplot(num_samples, num_augmented + 1, i * (num_augmented + 1) + j + 2)\n        plt.imshow(aug_img, cmap='gray')\n        plt.title(f'Augmented {j+1}')\n        plt.axis('off')\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:48:30.25488Z","iopub.execute_input":"2024-06-02T05:48:30.255661Z","iopub.status.idle":"2024-06-02T05:48:32.154962Z","shell.execute_reply.started":"2024-06-02T05:48:30.255627Z","shell.execute_reply":"2024-06-02T05:48:32.154032Z"},"trusted":true},"execution_count":61,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x1000 with 30 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":" \n# build 15 cnn networks\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\n\nnets = 15\nmodel = [0] *nets\nfor j in range(nets):\n    model[j] = Sequential()\n\n    model[j].add(Conv2D(32, kernel_size = 3, activation='relu', input_shape = (28, 28, 1)))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(32, kernel_size = 3, activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(32, kernel_size = 5, strides=2, padding='same', activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Dropout(0.4))\n\n    model[j].add(Conv2D(64, kernel_size = 3, activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(64, kernel_size = 3, activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(64, kernel_size = 5, strides=2, padding='same', activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Dropout(0.4))\n\n    model[j].add(Conv2D(128, kernel_size = 4, activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Flatten())\n    model[j].add(Dropout(0.4))\n    model[j].add(Dense(10, activation='softmax'))\n\n    # COMPILE WITH ADAM OPTIMIZER AND CROSS ENTROPY COST\n    model[j].compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:48:55.894201Z","iopub.execute_input":"2024-06-02T05:48:55.894956Z","iopub.status.idle":"2024-06-02T05:49:00.539084Z","shell.execute_reply.started":"2024-06-02T05:48:55.894925Z","shell.execute_reply":"2024-06-02T05:49:00.538107Z"},"trusted":true},"execution_count":62,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:99: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(\n","output_type":"stream"}]},{"cell_type":"code","source":"\n\n# decrease learning rate for each epochs\nlearning_rate = LearningRateScheduler(lambda x: 1e-3 * 0.95 ** x)\n# training cnn model\nhistory = [0] * nets\nepochs = 40\nfor j in range(nets):\n    train_cnn_train, train_cnn_val, train_labels_train, train_labels_val = train_test_split(train_cnn, train_labels, test_size = 0.2)\n    history[j] = model[j].fit(datagen.flow(train_cnn_train,train_labels_train, batch_size=64),\n        epochs = epochs, steps_per_epoch = train_cnn_train.shape[0]//64,  \n        validation_data = (train_cnn_val,train_labels_val), callbacks=[learning_rate], verbose=0)\n    print(\"CNN {0:d}: Epochs={1:d}, Train accuracy={2:.5f}, Validation accuracy={3:.5f}\".format(\n        j+1,epochs,max(history[j].history['accuracy']),max(history[j].history['val_accuracy']) ))","metadata":{"execution":{"iopub.status.busy":"2024-06-02T05:55:43.318674Z","iopub.execute_input":"2024-06-02T05:55:43.319064Z","iopub.status.idle":"2024-06-02T06:52:23.984502Z","shell.execute_reply.started":"2024-06-02T05:55:43.319035Z","shell.execute_reply":"2024-06-02T06:52:23.983474Z"},"trusted":true},"execution_count":63,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:120: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\n2024-06-02 05:55:51.045696: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 676: 2.01985, expected 1.26858\n2024-06-02 05:55:51.045744: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 677: 2.17255, expected 1.42128\n2024-06-02 05:55:51.045760: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 678: 2.62646, expected 1.87519\n2024-06-02 05:55:51.045774: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 679: 2.17504, expected 1.42377\n2024-06-02 05:55:51.045787: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 680: 2.46212, expected 1.71085\n2024-06-02 05:55:51.045797: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 681: 2.56704, expected 1.81578\n2024-06-02 05:55:51.045807: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 682: 2.12676, expected 1.3755\n2024-06-02 05:55:51.045817: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 683: 2.64863, expected 1.89736\n2024-06-02 05:55:51.045827: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 684: 2.03886, expected 1.28759\n2024-06-02 05:55:51.045838: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 685: 1.85403, expected 1.10276\n2024-06-02 05:55:51.046460: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:705] Results mismatch between different convolution algorithms. This is likely a bug/unexpected loss of precision in cudnn.\n(f32[64,32,26,26]{3,2,1,0}, u8[0]{0}) custom-call(f32[64,1,28,28]{3,2,1,0}, f32[32,1,3,3]{3,2,1,0}, f32[32]{0}), window={size=3x3}, dim_labels=bf01_oi01->bf01, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"conv_result_scale\":1,\"activation_mode\":\"kRelu\",\"side_input_scale\":0,\"leakyrelu_alpha\":0} for eng20{k2=2,k4=1,k5=1,k6=0,k7=0} vs eng15{k5=1,k6=0,k7=1,k10=1}\n2024-06-02 05:55:51.046488: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:270] Device: Tesla P100-PCIE-16GB\n2024-06-02 05:55:51.046503: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:271] Platform: Compute Capability 6.0\n2024-06-02 05:55:51.046516: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:272] Driver: 12020 (535.129.3)\n2024-06-02 05:55:51.046527: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:273] Runtime: <undefined>\n2024-06-02 05:55:51.046546: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:280] cudnn version: 8.9.0\n2024-06-02 05:55:51.162152: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 676: 2.01985, expected 1.26858\n2024-06-02 05:55:51.162198: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 677: 2.17255, expected 1.42128\n2024-06-02 05:55:51.162212: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 678: 2.62646, expected 1.87519\n2024-06-02 05:55:51.162225: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 679: 2.17504, expected 1.42377\n2024-06-02 05:55:51.162243: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 680: 2.46212, expected 1.71085\n2024-06-02 05:55:51.162254: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 681: 2.56704, expected 1.81578\n2024-06-02 05:55:51.162265: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 682: 2.12676, expected 1.3755\n2024-06-02 05:55:51.162276: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 683: 2.64863, expected 1.89736\n2024-06-02 05:55:51.162288: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 684: 2.03886, expected 1.28759\n2024-06-02 05:55:51.162301: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 685: 1.85403, expected 1.10276\n2024-06-02 05:55:51.162325: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:705] Results mismatch between different convolution algorithms. This is likely a bug/unexpected loss of precision in cudnn.\n(f32[64,32,26,26]{3,2,1,0}, u8[0]{0}) custom-call(f32[64,1,28,28]{3,2,1,0}, f32[32,1,3,3]{3,2,1,0}, f32[32]{0}), window={size=3x3}, dim_labels=bf01_oi01->bf01, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"conv_result_scale\":1,\"activation_mode\":\"kRelu\",\"side_input_scale\":0,\"leakyrelu_alpha\":0} for eng20{k2=2,k4=1,k5=1,k6=0,k7=0} vs eng15{k5=1,k6=0,k7=1,k10=1}\n2024-06-02 05:55:51.162340: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:270] Device: Tesla P100-PCIE-16GB\n2024-06-02 05:55:51.162354: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:271] Platform: Compute Capability 6.0\n2024-06-02 05:55:51.162365: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:272] Driver: 12020 (535.129.3)\n2024-06-02 05:55:51.162377: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:273] Runtime: <undefined>\n2024-06-02 05:55:51.162395: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:280] cudnn version: 8.9.0\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1717307757.121736     135 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n2024-06-02 05:56:07.184668: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 0: 2.35363, expected 1.53764\n2024-06-02 05:56:07.184730: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 1: 1.82107, expected 1.00508\n2024-06-02 05:56:07.184748: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 2: 1.81936, expected 1.00338\n2024-06-02 05:56:07.184761: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 3: 2.23827, expected 1.42229\n2024-06-02 05:56:07.184775: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 4: 3.05481, expected 2.23883\n2024-06-02 05:56:07.184788: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 5: 2.58554, expected 1.76955\n2024-06-02 05:56:07.184801: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 6: 3.00002, expected 2.18403\n2024-06-02 05:56:07.184815: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 7: 2.82235, expected 2.00636\n2024-06-02 05:56:07.184828: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 8: 3.10502, expected 2.28904\n2024-06-02 05:56:07.184839: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 9: 2.73743, expected 1.92145\n2024-06-02 05:56:07.184863: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:705] Results mismatch between different convolution algorithms. This is likely a bug/unexpected loss of precision in cudnn.\n(f32[32,32,26,26]{3,2,1,0}, u8[0]{0}) custom-call(f32[32,1,28,28]{3,2,1,0}, f32[32,1,3,3]{3,2,1,0}, f32[32]{0}), window={size=3x3}, dim_labels=bf01_oi01->bf01, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"conv_result_scale\":1,\"activation_mode\":\"kRelu\",\"side_input_scale\":0,\"leakyrelu_alpha\":0} for eng20{k2=2,k4=1,k5=1,k6=0,k7=0} vs eng15{k5=1,k6=0,k7=1,k10=1}\n2024-06-02 05:56:07.184877: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:270] Device: Tesla P100-PCIE-16GB\n2024-06-02 05:56:07.184887: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:271] Platform: Compute Capability 6.0\n2024-06-02 05:56:07.184898: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:272] Driver: 12020 (535.129.3)\n2024-06-02 05:56:07.184908: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:273] Runtime: <undefined>\n2024-06-02 05:56:07.184922: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:280] cudnn version: 8.9.0\n2024-06-02 05:56:07.216173: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 0: 2.35363, expected 1.53764\n2024-06-02 05:56:07.216207: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 1: 1.82107, expected 1.00508\n2024-06-02 05:56:07.216216: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 2: 1.81936, expected 1.00338\n2024-06-02 05:56:07.216225: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 3: 2.23827, expected 1.42229\n2024-06-02 05:56:07.216233: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 4: 3.05481, expected 2.23883\n2024-06-02 05:56:07.216241: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 5: 2.58554, expected 1.76955\n2024-06-02 05:56:07.216249: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 6: 3.00002, expected 2.18403\n2024-06-02 05:56:07.216257: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 7: 2.82235, expected 2.00636\n2024-06-02 05:56:07.216266: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 8: 3.10502, expected 2.28904\n2024-06-02 05:56:07.216279: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 9: 2.73743, expected 1.92145\n2024-06-02 05:56:07.216304: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:705] Results mismatch between different convolution algorithms. This is likely a bug/unexpected loss of precision in cudnn.\n(f32[32,32,26,26]{3,2,1,0}, u8[0]{0}) custom-call(f32[32,1,28,28]{3,2,1,0}, f32[32,1,3,3]{3,2,1,0}, f32[32]{0}), window={size=3x3}, dim_labels=bf01_oi01->bf01, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"conv_result_scale\":1,\"activation_mode\":\"kRelu\",\"side_input_scale\":0,\"leakyrelu_alpha\":0} for eng20{k2=2,k4=1,k5=1,k6=0,k7=0} vs eng15{k5=1,k6=0,k7=1,k10=1}\n2024-06-02 05:56:07.216324: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:270] Device: Tesla P100-PCIE-16GB\n2024-06-02 05:56:07.216336: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:271] Platform: Compute Capability 6.0\n2024-06-02 05:56:07.216349: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:272] Driver: 12020 (535.129.3)\n2024-06-02 05:56:07.216361: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:273] Runtime: <undefined>\n2024-06-02 05:56:07.216378: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:280] cudnn version: 8.9.0\n2024-06-02 05:56:08.702886: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 0: 1.34972, expected 1.00161\n2024-06-02 05:56:08.702947: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 1: 1.6774, expected 1.32929\n2024-06-02 05:56:08.702964: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 2: 1.95868, expected 1.61057\n2024-06-02 05:56:08.702977: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 3: 1.69333, expected 1.34521\n2024-06-02 05:56:08.702987: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 4: 2.08558, expected 1.73747\n2024-06-02 05:56:08.702998: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 6: 1.59326, expected 1.24515\n2024-06-02 05:56:08.703007: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 8: 1.72639, expected 1.37827\n2024-06-02 05:56:08.703018: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 9: 1.78453, expected 1.43641\n2024-06-02 05:56:08.703027: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 10: 1.51148, expected 1.16336\n2024-06-02 05:56:08.703038: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 11: 2.12228, expected 1.77416\n2024-06-02 05:56:08.703057: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:705] Results mismatch between different convolution algorithms. This is likely a bug/unexpected loss of precision in cudnn.\n(f32[16,32,26,26]{3,2,1,0}, u8[0]{0}) custom-call(f32[16,1,28,28]{3,2,1,0}, f32[32,1,3,3]{3,2,1,0}, f32[32]{0}), window={size=3x3}, dim_labels=bf01_oi01->bf01, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"conv_result_scale\":1,\"activation_mode\":\"kRelu\",\"side_input_scale\":0,\"leakyrelu_alpha\":0} for eng20{k2=2,k4=1,k5=1,k6=0,k7=0} vs eng15{k5=1,k6=0,k7=1,k10=1}\n2024-06-02 05:56:08.703068: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:270] Device: Tesla P100-PCIE-16GB\n2024-06-02 05:56:08.703079: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:271] Platform: Compute Capability 6.0\n2024-06-02 05:56:08.703096: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:272] Driver: 12020 (535.129.3)\n2024-06-02 05:56:08.703107: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:273] Runtime: <undefined>\n2024-06-02 05:56:08.703121: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:280] cudnn version: 8.9.0\n2024-06-02 05:56:08.733411: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 0: 1.34972, expected 1.00161\n2024-06-02 05:56:08.733457: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 1: 1.6774, expected 1.32929\n2024-06-02 05:56:08.733474: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 2: 1.95868, expected 1.61057\n2024-06-02 05:56:08.733488: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 3: 1.69333, expected 1.34521\n2024-06-02 05:56:08.733499: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 4: 2.08558, expected 1.73747\n2024-06-02 05:56:08.733510: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 6: 1.59326, expected 1.24515\n2024-06-02 05:56:08.733521: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 8: 1.72639, expected 1.37827\n2024-06-02 05:56:08.733532: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 9: 1.78453, expected 1.43641\n2024-06-02 05:56:08.733545: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 10: 1.51148, expected 1.16336\n2024-06-02 05:56:08.733558: E external/local_xla/xla/service/gpu/buffer_comparator.cc:1137] Difference at 11: 2.12228, expected 1.77416\n2024-06-02 05:56:08.733582: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:705] Results mismatch between different convolution algorithms. This is likely a bug/unexpected loss of precision in cudnn.\n(f32[16,32,26,26]{3,2,1,0}, u8[0]{0}) custom-call(f32[16,1,28,28]{3,2,1,0}, f32[32,1,3,3]{3,2,1,0}, f32[32]{0}), window={size=3x3}, dim_labels=bf01_oi01->bf01, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"conv_result_scale\":1,\"activation_mode\":\"kRelu\",\"side_input_scale\":0,\"leakyrelu_alpha\":0} for eng20{k2=2,k4=1,k5=1,k6=0,k7=0} vs eng15{k5=1,k6=0,k7=1,k10=1}\n2024-06-02 05:56:08.733595: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:270] Device: Tesla P100-PCIE-16GB\n2024-06-02 05:56:08.733606: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:271] Platform: Compute Capability 6.0\n2024-06-02 05:56:08.733616: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:272] Driver: 12020 (535.129.3)\n2024-06-02 05:56:08.733628: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:273] Runtime: <undefined>\n2024-06-02 05:56:08.733643: E external/local_xla/xla/service/gpu/conv_algorithm_picker.cc:280] cudnn version: 8.9.0\n/opt/conda/lib/python3.10/contextlib.py:153: UserWarning: Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches. You may need to use the `.repeat()` function when building your dataset.\n  self.gen.throw(typ, value, traceback)\n","output_type":"stream"},{"name":"stdout","text":"CNN 1: Epochs=40, Train accuracy=0.99125, Validation accuracy=0.99571\nCNN 2: Epochs=40, Train accuracy=0.99086, Validation accuracy=0.99548\nCNN 3: Epochs=40, Train accuracy=0.99092, Validation accuracy=0.99417\nCNN 4: Epochs=40, Train accuracy=0.99235, Validation accuracy=0.99464\nCNN 5: Epochs=40, Train accuracy=0.99229, Validation accuracy=0.99452\nCNN 6: Epochs=40, Train accuracy=0.99185, Validation accuracy=0.99488\nCNN 7: Epochs=40, Train accuracy=0.99128, Validation accuracy=0.99393\nCNN 8: Epochs=40, Train accuracy=0.99128, Validation accuracy=0.99536\nCNN 9: Epochs=40, Train accuracy=0.99161, Validation accuracy=0.99452\nCNN 10: Epochs=40, Train accuracy=0.99149, Validation accuracy=0.99524\nCNN 11: Epochs=40, Train accuracy=0.99098, Validation accuracy=0.99488\nCNN 12: Epochs=40, Train accuracy=0.99095, Validation accuracy=0.99583\nCNN 13: Epochs=40, Train accuracy=0.99182, Validation accuracy=0.99536\nCNN 14: Epochs=40, Train accuracy=0.99092, Validation accuracy=0.99548\nCNN 15: Epochs=40, Train accuracy=0.99190, Validation accuracy=0.99476\n","output_type":"stream"}]},{"cell_type":"code","source":"# Create a directory within the Kaggle working directory\nsave_mnist = '/kaggle/working/saved_models'\nif not os.path.exists(save_mnist):\n    os.makedirs(save_mnist)","metadata":{"execution":{"iopub.status.busy":"2024-06-02T06:57:15.719984Z","iopub.execute_input":"2024-06-02T06:57:15.720359Z","iopub.status.idle":"2024-06-02T06:57:15.725973Z","shell.execute_reply.started":"2024-06-02T06:57:15.720332Z","shell.execute_reply":"2024-06-02T06:57:15.724979Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"code","source":"# Save the model\nmodel[j].save(save_mnist)\nprint(f\"Model {j+1} saved to {save_mnist}/model_{j+1}.h5\")","metadata":{"execution":{"iopub.status.busy":"2024-06-02T06:57:26.582007Z","iopub.execute_input":"2024-06-02T06:57:26.582824Z","iopub.status.idle":"2024-06-02T06:57:26.676687Z","shell.execute_reply.started":"2024-06-02T06:57:26.582793Z","shell.execute_reply":"2024-06-02T06:57:26.675478Z"},"trusted":true},"execution_count":65,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[65], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Save the model\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[43mmodel\u001b[49m\u001b[43m[\u001b[49m\u001b[43mj\u001b[49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msave\u001b[49m\u001b[43m(\u001b[49m\u001b[43msave_mnist\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mModel \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mj\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m saved to \u001b[39m\u001b[38;5;132;01m{\u001b[39;00msave_mnist\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m/model_\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mj\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py:122\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    119\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[1;32m    120\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[1;32m    121\u001b[0m     \u001b[38;5;66;03m# `keras.config.disable_traceback_filtering()`\u001b[39;00m\n\u001b[0;32m--> 122\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    123\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    124\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/saving/saving_api.py:106\u001b[0m, in \u001b[0;36msave_model\u001b[0;34m(model, filepath, overwrite, **kwargs)\u001b[0m\n\u001b[1;32m    102\u001b[0m     legacy_h5_format\u001b[38;5;241m.\u001b[39msave_model_to_hdf5(\n\u001b[1;32m    103\u001b[0m         model, filepath, overwrite, include_optimizer\n\u001b[1;32m    104\u001b[0m     )\n\u001b[1;32m    105\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 106\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    107\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid filepath extension for saving. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    108\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPlease add either a `.keras` extension for the native Keras \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    109\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mformat (recommended) or a `.h5` extension. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    110\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mUse `model.export(filepath)` if you want to export a SavedModel \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    111\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfor use with TFLite/TFServing/etc. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    112\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mReceived: filepath=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfilepath\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    113\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: Invalid filepath extension for saving. Please add either a `.keras` extension for the native Keras format (recommended) or a `.h5` extension. Use `model.export(filepath)` if you want to export a SavedModel for use with TFLite/TFServing/etc. Received: filepath=/kaggle/working/saved_models."],"ename":"ValueError","evalue":"Invalid filepath extension for saving. Please add either a `.keras` extension for the native Keras format (recommended) or a `.h5` extension. Use `model.export(filepath)` if you want to export a SavedModel for use with TFLite/TFServing/etc. Received: filepath=/kaggle/working/saved_models.","output_type":"error"}]},{"cell_type":"code","source":"from tensorflow.keras.models import load_model\n\n# Load a specific model (e.g., model 1)\nmodel_path = os.path.join(save_mnist, 'model_15.h5')\nloaded_model = load_model(model_path)\n\n# Check the model summary to confirm it loaded correctly\nloaded_model.summary()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-31T08:49:29.499109Z","iopub.execute_input":"2024-05-31T08:49:29.499481Z","iopub.status.idle":"2024-05-31T08:49:29.792318Z","shell.execute_reply.started":"2024-05-31T08:49:29.499451Z","shell.execute_reply":"2024-05-31T08:49:29.791472Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\n# Predicting on test data using ensemble technique\nprediction = np.zeros((test_cnn.shape[0], 10))  # Adjust `num_classes` to your number of classes\n\nfor j in range(nets):\n    prediction += model[j].predict(test_cnn)\n\n# Average the predictions\nprediction /= nets\n\n# If you need the class labels\nfinal_predictions = np.argmax(prediction, axis=1)\n\n# If you want to save the final predictions to a file, for example:\nimport pandas as pd\nsubmission = pd.DataFrame({'Id': test_ids, 'Label': final_predictions})\nsubmission.to_csv('mnist_cnn_submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T06:31:10.307145Z","iopub.execute_input":"2024-06-01T06:31:10.307982Z","iopub.status.idle":"2024-06-01T06:31:10.343539Z","shell.execute_reply.started":"2024-06-01T06:31:10.307944Z","shell.execute_reply":"2024-06-01T06:31:10.342159Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}